// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: todo-service.proto

package todo_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServiceClient interface {
	SetUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*User, error)
	CreateReminder(ctx context.Context, in *Reminder, opts ...grpc.CallOption) (*ReminderId, error)
	RemoveReminder(ctx context.Context, in *ReminderId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRemindersByUserId(ctx context.Context, in *UserId, opts ...grpc.CallOption) (TodoService_GetRemindersByUserIdClient, error)
}

type todoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServiceClient(cc grpc.ClientConnInterface) TodoServiceClient {
	return &todoServiceClient{cc}
}

func (c *todoServiceClient) SetUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/todoservice.TodoService/SetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/todoservice.TodoService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) CreateReminder(ctx context.Context, in *Reminder, opts ...grpc.CallOption) (*ReminderId, error) {
	out := new(ReminderId)
	err := c.cc.Invoke(ctx, "/todoservice.TodoService/CreateReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) RemoveReminder(ctx context.Context, in *ReminderId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/todoservice.TodoService/RemoveReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetRemindersByUserId(ctx context.Context, in *UserId, opts ...grpc.CallOption) (TodoService_GetRemindersByUserIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[0], "/todoservice.TodoService/GetRemindersByUserId", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceGetRemindersByUserIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TodoService_GetRemindersByUserIdClient interface {
	Recv() (*Reminder, error)
	grpc.ClientStream
}

type todoServiceGetRemindersByUserIdClient struct {
	grpc.ClientStream
}

func (x *todoServiceGetRemindersByUserIdClient) Recv() (*Reminder, error) {
	m := new(Reminder)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TodoServiceServer is the server API for TodoService service.
// All implementations must embed UnimplementedTodoServiceServer
// for forward compatibility
type TodoServiceServer interface {
	SetUser(context.Context, *User) (*emptypb.Empty, error)
	GetUser(context.Context, *UserId) (*User, error)
	CreateReminder(context.Context, *Reminder) (*ReminderId, error)
	RemoveReminder(context.Context, *ReminderId) (*emptypb.Empty, error)
	GetRemindersByUserId(*UserId, TodoService_GetRemindersByUserIdServer) error
	mustEmbedUnimplementedTodoServiceServer()
}

// UnimplementedTodoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTodoServiceServer struct {
}

func (UnimplementedTodoServiceServer) SetUser(context.Context, *User) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUser not implemented")
}
func (UnimplementedTodoServiceServer) GetUser(context.Context, *UserId) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedTodoServiceServer) CreateReminder(context.Context, *Reminder) (*ReminderId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReminder not implemented")
}
func (UnimplementedTodoServiceServer) RemoveReminder(context.Context, *ReminderId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveReminder not implemented")
}
func (UnimplementedTodoServiceServer) GetRemindersByUserId(*UserId, TodoService_GetRemindersByUserIdServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRemindersByUserId not implemented")
}
func (UnimplementedTodoServiceServer) mustEmbedUnimplementedTodoServiceServer() {}

// UnsafeTodoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServiceServer will
// result in compilation errors.
type UnsafeTodoServiceServer interface {
	mustEmbedUnimplementedTodoServiceServer()
}

func RegisterTodoServiceServer(s grpc.ServiceRegistrar, srv TodoServiceServer) {
	s.RegisterService(&TodoService_ServiceDesc, srv)
}

func _TodoService_SetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).SetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoservice.TodoService/SetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).SetUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoservice.TodoService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_CreateReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Reminder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).CreateReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoservice.TodoService/CreateReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).CreateReminder(ctx, req.(*Reminder))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_RemoveReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReminderId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).RemoveReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoservice.TodoService/RemoveReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).RemoveReminder(ctx, req.(*ReminderId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetRemindersByUserId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoServiceServer).GetRemindersByUserId(m, &todoServiceGetRemindersByUserIdServer{stream})
}

type TodoService_GetRemindersByUserIdServer interface {
	Send(*Reminder) error
	grpc.ServerStream
}

type todoServiceGetRemindersByUserIdServer struct {
	grpc.ServerStream
}

func (x *todoServiceGetRemindersByUserIdServer) Send(m *Reminder) error {
	return x.ServerStream.SendMsg(m)
}

// TodoService_ServiceDesc is the grpc.ServiceDesc for TodoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todoservice.TodoService",
	HandlerType: (*TodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetUser",
			Handler:    _TodoService_SetUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _TodoService_GetUser_Handler,
		},
		{
			MethodName: "CreateReminder",
			Handler:    _TodoService_CreateReminder_Handler,
		},
		{
			MethodName: "RemoveReminder",
			Handler:    _TodoService_RemoveReminder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRemindersByUserId",
			Handler:       _TodoService_GetRemindersByUserId_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "todo-service.proto",
}
